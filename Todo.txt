Before new release
-add the option to center the Thumbnail.
- prepare menus for all the tools



private void CenterElementInScrollViewer(UIElement elementToCenter)
{
    // Find the ScrollViewer within the VisualTree
    var scrollViewer = FindVisualParent<ScrollViewer>(Thb);

    if (scrollViewer != null && elementToCenter != null)
    {
        // Get the position of the element relative to the ScrollViewer
        var position = elementToCenter.TransformToAncestor(scrollViewer).Transform(new Point(0, 0));

        // Calculate the horizontal and vertical offsets to center the element
        double centerX = position.X - (scrollViewer.ViewportWidth / 2) + (elementToCenter.RenderSize.Width / 2);
        double centerY = position.Y - (scrollViewer.ViewportHeight / 2) + (elementToCenter.RenderSize.Height / 2);

        // Scroll to the calculated position to center the element
        scrollViewer.ScrollToHorizontalOffset(centerX);
        scrollViewer.ScrollToVerticalOffset(centerY);
    }
}

// Utility function to find a visual parent of a specific type (e.g., ScrollViewer)
private T FindVisualParent<T>(DependencyObject child) where T : DependencyObject
{
    DependencyObject parent = VisualTreeHelper.GetParent(child);

    while (parent != null)
    {
        if (parent is T)
            return (T)parent;

        parent = VisualTreeHelper.GetParent(parent);
    }

    return null;
}









1.

public enum ToolType
{
    Paint,
    ColorSelect,
    AreaSelect
}

2.

public class ImageViewerViewModel : INotifyPropertyChanged
{
    private ToolType _selectedTool;

    public ToolType SelectedTool
    {
        get => _selectedTool;
        set
        {
            if (_selectedTool != value)
            {
                _selectedTool = value;
                OnPropertyChanged(nameof(SelectedTool));
            }
        }
    }

    // Implement INotifyPropertyChanged
    public event PropertyChangedEventHandler PropertyChanged;

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }
}

3.

<Window.Resources>
    <!-- Paint Tool Options -->
    <DataTemplate x:Key="PaintToolOptions">
        <StackPanel>
            <TextBlock Text="Paint Tool Options" FontWeight="Bold" />
            <Label Content="Brush Size:" />
            <Slider Minimum="1" Maximum="20" />
            <Label Content="Opacity:" />
            <Slider Minimum="0" Maximum="100" />
        </StackPanel>
    </DataTemplate>

    <!-- Color Select Tool Options -->
    <DataTemplate x:Key="ColorSelectToolOptions">
        <StackPanel>
            <TextBlock Text="Color Select Options" FontWeight="Bold" />
            <Label Content="Tolerance:" />
            <Slider Minimum="0" Maximum="100" />
        </StackPanel>
    </DataTemplate>

    <!-- Area Select Tool Options -->
    <DataTemplate x:Key="AreaSelectToolOptions">
        <StackPanel>
            <TextBlock Text="Area Select Options" FontWeight="Bold" />
            <Label Content="Selection Mode:" />
            <ComboBox>
                <ComboBoxItem Content="Rectangle" />
                <ComboBoxItem Content="Ellipse" />
            </ComboBox>
            <Label Content="Fill Color:" />
            <Button Content="Choose Color" />
        </StackPanel>
    </DataTemplate>

    <!-- Template Selector -->
    <local:ToolOptionsTemplateSelector x:Key="ToolOptionsTemplateSelector"
                                       PaintToolTemplate="{StaticResource PaintToolOptions}"
                                       ColorSelectToolTemplate="{StaticResource ColorSelectToolOptions}"
                                       AreaSelectToolTemplate="{StaticResource AreaSelectToolOptions}" />
</Window.Resources>




